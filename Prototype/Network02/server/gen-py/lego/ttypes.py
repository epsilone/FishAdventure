#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MessageId(object):
  RETRIEVE_GAMES = 0
  CREATE_GAME = 1
  JOIN_GAME = 2
  LEAVE_GAME = 3
  AVAILABLE_GAMES = 4
  GAME_JOINED = 5
  PLAYER_CONNECTED = 6
  PLAYER_DISCONNECTED = 7
  BRICK_UPDATE = 8
  GAME_END = 9
  ERROR = 10

  _VALUES_TO_NAMES = {
    0: "RETRIEVE_GAMES",
    1: "CREATE_GAME",
    2: "JOIN_GAME",
    3: "LEAVE_GAME",
    4: "AVAILABLE_GAMES",
    5: "GAME_JOINED",
    6: "PLAYER_CONNECTED",
    7: "PLAYER_DISCONNECTED",
    8: "BRICK_UPDATE",
    9: "GAME_END",
    10: "ERROR",
  }

  _NAMES_TO_VALUES = {
    "RETRIEVE_GAMES": 0,
    "CREATE_GAME": 1,
    "JOIN_GAME": 2,
    "LEAVE_GAME": 3,
    "AVAILABLE_GAMES": 4,
    "GAME_JOINED": 5,
    "PLAYER_CONNECTED": 6,
    "PLAYER_DISCONNECTED": 7,
    "BRICK_UPDATE": 8,
    "GAME_END": 9,
    "ERROR": 10,
  }

class BrickColor(object):
  WHITE = 0
  RED = 1
  BLUE = 2
  GREEN = 3
  YELLOW = 4

  _VALUES_TO_NAMES = {
    0: "WHITE",
    1: "RED",
    2: "BLUE",
    3: "GREEN",
    4: "YELLOW",
  }

  _NAMES_TO_VALUES = {
    "WHITE": 0,
    "RED": 1,
    "BLUE": 2,
    "GREEN": 3,
    "YELLOW": 4,
  }

class NetErrorStatus(object):
  SERVER_ERROR = 0

  _VALUES_TO_NAMES = {
    0: "SERVER_ERROR",
  }

  _NAMES_TO_VALUES = {
    "SERVER_ERROR": 0,
  }


class ClientActions(object):
  """
  Attributes:
   - playerId
   - actions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'playerId', None, None, ), # 1
    (2, TType.STRING, 'actions', None, None, ), # 2
  )

  def __init__(self, playerId=None, actions=None,):
    self.playerId = playerId
    self.actions = actions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.playerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.actions = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientActions')
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.STRING, 1)
      oprot.writeString(self.playerId)
      oprot.writeFieldEnd()
    if self.actions is not None:
      oprot.writeFieldBegin('actions', TType.STRING, 2)
      oprot.writeString(self.actions)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playerId is None:
      raise TProtocol.TProtocolException(message='Required field playerId is unset!')
    if self.actions is None:
      raise TProtocol.TProtocolException(message='Required field actions is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetError(object):
  """
  Attributes:
   - status
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, status=None, name=None,):
    self.status = status
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NetError')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RetrieveGames(object):
  """
  Attributes:
   - playerId
   - full
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'playerId', None, None, ), # 1
    (2, TType.BOOL, 'full', None, None, ), # 2
  )

  def __init__(self, playerId=None, full=None,):
    self.playerId = playerId
    self.full = full

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.playerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.full = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RetrieveGames')
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.STRING, 1)
      oprot.writeString(self.playerId)
      oprot.writeFieldEnd()
    if self.full is not None:
      oprot.writeFieldBegin('full', TType.BOOL, 2)
      oprot.writeBool(self.full)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playerId is None:
      raise TProtocol.TProtocolException(message='Required field playerId is unset!')
    if self.full is None:
      raise TProtocol.TProtocolException(message='Required field full is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetGameInfo(object):
  """
  Attributes:
   - gameId
   - name
   - host
   - port
   - visible
   - maxPlayers
   - players
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gameId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'host', None, None, ), # 3
    (4, TType.I32, 'port', None, None, ), # 4
    (5, TType.BOOL, 'visible', None, None, ), # 5
    (6, TType.I32, 'maxPlayers', None, None, ), # 6
    (7, TType.LIST, 'players', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, gameId=None, name=None, host=None, port=None, visible=None, maxPlayers=None, players=None,):
    self.gameId = gameId
    self.name = name
    self.host = host
    self.port = port
    self.visible = visible
    self.maxPlayers = maxPlayers
    self.players = players

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gameId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.host = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.port = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.visible = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.maxPlayers = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.players = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.players.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NetGameInfo')
    if self.gameId is not None:
      oprot.writeFieldBegin('gameId', TType.STRING, 1)
      oprot.writeString(self.gameId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.host is not None:
      oprot.writeFieldBegin('host', TType.STRING, 3)
      oprot.writeString(self.host)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I32, 4)
      oprot.writeI32(self.port)
      oprot.writeFieldEnd()
    if self.visible is not None:
      oprot.writeFieldBegin('visible', TType.BOOL, 5)
      oprot.writeBool(self.visible)
      oprot.writeFieldEnd()
    if self.maxPlayers is not None:
      oprot.writeFieldBegin('maxPlayers', TType.I32, 6)
      oprot.writeI32(self.maxPlayers)
      oprot.writeFieldEnd()
    if self.players is not None:
      oprot.writeFieldBegin('players', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.players))
      for iter6 in self.players:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gameId is None:
      raise TProtocol.TProtocolException(message='Required field gameId is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.host is None:
      raise TProtocol.TProtocolException(message='Required field host is unset!')
    if self.port is None:
      raise TProtocol.TProtocolException(message='Required field port is unset!')
    if self.visible is None:
      raise TProtocol.TProtocolException(message='Required field visible is unset!')
    if self.maxPlayers is None:
      raise TProtocol.TProtocolException(message='Required field maxPlayers is unset!')
    if self.players is None:
      raise TProtocol.TProtocolException(message='Required field players is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetGames(object):
  """
  Attributes:
   - gameInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'gameInfos', (TType.STRUCT,(NetGameInfo, NetGameInfo.thrift_spec)), None, ), # 1
  )

  def __init__(self, gameInfos=None,):
    self.gameInfos = gameInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.gameInfos = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = NetGameInfo()
            _elem12.read(iprot)
            self.gameInfos.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NetGames')
    if self.gameInfos is not None:
      oprot.writeFieldBegin('gameInfos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.gameInfos))
      for iter13 in self.gameInfos:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gameInfos is None:
      raise TProtocol.TProtocolException(message='Required field gameInfos is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateGame(object):
  """
  Attributes:
   - playerName
   - gameName
   - visible
   - maxPlayers
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'playerName', None, None, ), # 1
    (2, TType.STRING, 'gameName', None, None, ), # 2
    (3, TType.BOOL, 'visible', None, None, ), # 3
    (4, TType.I32, 'maxPlayers', None, None, ), # 4
  )

  def __init__(self, playerName=None, gameName=None, visible=None, maxPlayers=None,):
    self.playerName = playerName
    self.gameName = gameName
    self.visible = visible
    self.maxPlayers = maxPlayers

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.playerName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.gameName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.visible = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.maxPlayers = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateGame')
    if self.playerName is not None:
      oprot.writeFieldBegin('playerName', TType.STRING, 1)
      oprot.writeString(self.playerName)
      oprot.writeFieldEnd()
    if self.gameName is not None:
      oprot.writeFieldBegin('gameName', TType.STRING, 2)
      oprot.writeString(self.gameName)
      oprot.writeFieldEnd()
    if self.visible is not None:
      oprot.writeFieldBegin('visible', TType.BOOL, 3)
      oprot.writeBool(self.visible)
      oprot.writeFieldEnd()
    if self.maxPlayers is not None:
      oprot.writeFieldBegin('maxPlayers', TType.I32, 4)
      oprot.writeI32(self.maxPlayers)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playerName is None:
      raise TProtocol.TProtocolException(message='Required field playerName is unset!')
    if self.gameName is None:
      raise TProtocol.TProtocolException(message='Required field gameName is unset!')
    if self.visible is None:
      raise TProtocol.TProtocolException(message='Required field visible is unset!')
    if self.maxPlayers is None:
      raise TProtocol.TProtocolException(message='Required field maxPlayers is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JoinGame(object):
  """
  Attributes:
   - gameId
   - playerName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'gameId', None, None, ), # 1
    (2, TType.STRING, 'playerName', None, None, ), # 2
  )

  def __init__(self, gameId=None, playerName=None,):
    self.gameId = gameId
    self.playerName = playerName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.gameId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.playerName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JoinGame')
    if self.gameId is not None:
      oprot.writeFieldBegin('gameId', TType.STRING, 1)
      oprot.writeString(self.gameId)
      oprot.writeFieldEnd()
    if self.playerName is not None:
      oprot.writeFieldBegin('playerName', TType.STRING, 2)
      oprot.writeString(self.playerName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.gameId is None:
      raise TProtocol.TProtocolException(message='Required field gameId is unset!')
    if self.playerName is None:
      raise TProtocol.TProtocolException(message='Required field playerName is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorldInfo(object):
  """
  Attributes:
   - bricks
   - rows
   - columns
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'bricks', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'rows', None, None, ), # 2
    (3, TType.I32, 'columns', None, None, ), # 3
  )

  def __init__(self, bricks=None, rows=None, columns=None,):
    self.bricks = bricks
    self.rows = rows
    self.columns = columns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.bricks = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.bricks.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rows = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.columns = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorldInfo')
    if self.bricks is not None:
      oprot.writeFieldBegin('bricks', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.bricks))
      for iter20 in self.bricks:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rows is not None:
      oprot.writeFieldBegin('rows', TType.I32, 2)
      oprot.writeI32(self.rows)
      oprot.writeFieldEnd()
    if self.columns is not None:
      oprot.writeFieldBegin('columns', TType.I32, 3)
      oprot.writeI32(self.columns)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.bricks is None:
      raise TProtocol.TProtocolException(message='Required field bricks is unset!')
    if self.rows is None:
      raise TProtocol.TProtocolException(message='Required field rows is unset!')
    if self.columns is None:
      raise TProtocol.TProtocolException(message='Required field columns is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayerConnected(object):
  """
  Attributes:
   - playerId
   - name
   - color
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'playerId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'color', None, None, ), # 3
  )

  def __init__(self, playerId=None, name=None, color=None,):
    self.playerId = playerId
    self.name = name
    self.color = color

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.playerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.color = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayerConnected')
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.STRING, 1)
      oprot.writeString(self.playerId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.color is not None:
      oprot.writeFieldBegin('color', TType.I32, 3)
      oprot.writeI32(self.color)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playerId is None:
      raise TProtocol.TProtocolException(message='Required field playerId is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.color is None:
      raise TProtocol.TProtocolException(message='Required field color is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GameJoined(object):
  """
  Attributes:
   - world
   - players
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'world', (WorldInfo, WorldInfo.thrift_spec), None, ), # 1
    (2, TType.LIST, 'players', (TType.STRUCT,(PlayerConnected, PlayerConnected.thrift_spec)), None, ), # 2
  )

  def __init__(self, world=None, players=None,):
    self.world = world
    self.players = players

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.world = WorldInfo()
          self.world.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.players = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = PlayerConnected()
            _elem26.read(iprot)
            self.players.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GameJoined')
    if self.world is not None:
      oprot.writeFieldBegin('world', TType.STRUCT, 1)
      self.world.write(oprot)
      oprot.writeFieldEnd()
    if self.players is not None:
      oprot.writeFieldBegin('players', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.players))
      for iter27 in self.players:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.world is None:
      raise TProtocol.TProtocolException(message='Required field world is unset!')
    if self.players is None:
      raise TProtocol.TProtocolException(message='Required field players is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BrickUpdate(object):
  """
  Attributes:
   - row
   - column
   - color
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'row', None, None, ), # 1
    (2, TType.I32, 'column', None, None, ), # 2
    (3, TType.I32, 'color', None, None, ), # 3
  )

  def __init__(self, row=None, column=None, color=None,):
    self.row = row
    self.column = column
    self.color = color

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.row = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.column = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.color = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BrickUpdate')
    if self.row is not None:
      oprot.writeFieldBegin('row', TType.I32, 1)
      oprot.writeI32(self.row)
      oprot.writeFieldEnd()
    if self.column is not None:
      oprot.writeFieldBegin('column', TType.I32, 2)
      oprot.writeI32(self.column)
      oprot.writeFieldEnd()
    if self.color is not None:
      oprot.writeFieldBegin('color', TType.I32, 3)
      oprot.writeI32(self.color)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.row is None:
      raise TProtocol.TProtocolException(message='Required field row is unset!')
    if self.column is None:
      raise TProtocol.TProtocolException(message='Required field column is unset!')
    if self.color is None:
      raise TProtocol.TProtocolException(message='Required field color is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayerDisconnect(object):
  """
  Attributes:
   - playerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'playerId', None, None, ), # 1
  )

  def __init__(self, playerId=None,):
    self.playerId = playerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.playerId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayerDisconnect')
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.STRING, 1)
      oprot.writeString(self.playerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.playerId is None:
      raise TProtocol.TProtocolException(message='Required field playerId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
