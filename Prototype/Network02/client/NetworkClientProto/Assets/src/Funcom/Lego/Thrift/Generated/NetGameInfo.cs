/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Funcom.Lego.Thrift.Generated
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NetGameInfo : TBase
  {
    private string _gameId;
    private string _name;
    private string _host;
    private int _port;
    private bool _visible;
    private int _maxPlayers;
    private List<string> _players;

    public string GameId
    {
      get
      {
        return _gameId;
      }
      set
      {
        __isset.gameId = true;
        this._gameId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public int Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        this._port = value;
      }
    }

    public bool Visible
    {
      get
      {
        return _visible;
      }
      set
      {
        __isset.visible = true;
        this._visible = value;
      }
    }

    public int MaxPlayers
    {
      get
      {
        return _maxPlayers;
      }
      set
      {
        __isset.maxPlayers = true;
        this._maxPlayers = value;
      }
    }

    public List<string> Players
    {
      get
      {
        return _players;
      }
      set
      {
        __isset.players = true;
        this._players = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool gameId;
      public bool name;
      public bool host;
      public bool port;
      public bool visible;
      public bool maxPlayers;
      public bool players;
    }

    public NetGameInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              GameId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Visible = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              MaxPlayers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Players = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  Players.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NetGameInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (GameId != null && __isset.gameId) {
        field.Name = "gameId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GameId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (__isset.port) {
        field.Name = "port";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Port);
        oprot.WriteFieldEnd();
      }
      if (__isset.visible) {
        field.Name = "visible";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Visible);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxPlayers) {
        field.Name = "maxPlayers";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxPlayers);
        oprot.WriteFieldEnd();
      }
      if (Players != null && __isset.players) {
        field.Name = "players";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Players.Count));
          foreach (string _iter3 in Players)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NetGameInfo(");
      sb.Append("GameId: ");
      sb.Append(GameId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Host: ");
      sb.Append(Host);
      sb.Append(",Port: ");
      sb.Append(Port);
      sb.Append(",Visible: ");
      sb.Append(Visible);
      sb.Append(",MaxPlayers: ");
      sb.Append(MaxPlayers);
      sb.Append(",Players: ");
      sb.Append(Players);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
