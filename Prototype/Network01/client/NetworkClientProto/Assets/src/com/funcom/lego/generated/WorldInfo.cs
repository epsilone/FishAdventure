/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.funcom.lego.generated
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WorldInfo : TBase
  {
    private List<BrickColor> _bricks;
    private int _rows;
    private int _columns;

    public List<BrickColor> Bricks
    {
      get
      {
        return _bricks;
      }
      set
      {
        __isset.bricks = true;
        this._bricks = value;
      }
    }

    public int Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    public int Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bricks;
      public bool rows;
      public bool columns;
    }

    public WorldInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Bricks = new List<BrickColor>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  BrickColor _elem2 = (BrickColor)0;
                  _elem2 = (BrickColor)iprot.ReadI32();
                  Bricks.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Rows = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Columns = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("WorldInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Bricks != null && __isset.bricks) {
        field.Name = "bricks";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Bricks.Count));
          foreach (BrickColor _iter3 in Bricks)
          {
            oprot.WriteI32((int)_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.rows) {
        field.Name = "rows";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Rows);
        oprot.WriteFieldEnd();
      }
      if (__isset.columns) {
        field.Name = "columns";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Columns);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("WorldInfo(");
      sb.Append("Bricks: ");
      sb.Append(Bricks);
      sb.Append(",Rows: ");
      sb.Append(Rows);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
